{"version":3,"sources":["nav.js","WeatherDisplay.js","serviceWorker.js","index.js"],"names":["Nav","props","state","units","class","href","React","Component","WeatherDisplay","handleChange1","event","setState","location","target","value","handleChange2","country","backbutton","submit","handleSubmit","preventDefault","loc","con","bitkey","process","fetch","then","response","json","data","desc","weather","code","name","city_name","country_code","temp","catch","error","alert","day1","max_temp","description","min_temp","datetime","day2","day3","day4","day5","console","log","handleSubmitF","bind","this","onClick","src","alt","onSubmit","type","onChange","placeholder","Boolean","window","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29a2df77.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nav.css\";\r\n\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      units: [\"metric\"]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"top-nav\">\r\n        <div class=\"nav-flex\">\r\n          <div class=\"nav-grid\">\r\n            <h2>\r\n              <a\r\n                class=\"nav-column-left \"\r\n                href=\"https://weather.gc.ca/city/pages/on-143_metric_e.html\"\r\n              >\r\n                Cirrus Weather\r\n              </a>\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./WeatherDisplay.css\";\r\nimport \"./search.css\";\r\n\r\nclass WeatherDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // desc will take in a description of the weather in it's first spot and then use that to define which icon\r\n      // to use in spot 2\r\n      units: [\"metric\"],\r\n\r\n      // submit is initially set to false and then used in the render function to determine whether or not to\r\n      // display weather information. It is set true in the onSubmit function\r\n      submit: false,\r\n\r\n      // location is simply the name of the location entered by the user\r\n      location: \"\",\r\n      country: \"\",\r\n      temp: \"\",\r\n      name: \"\",\r\n\r\n      // days 1 through 5 contain high temp in 1, weather description in 2, weather icon path in 3, and min temp in 4\r\n      day1: [\"\", \"\", \"\", \"\", \"\"],\r\n      day2: [\"\", \"\", \"\", \"\", \"\"],\r\n      day3: [\"\", \"\", \"\", \"\", \"\"],\r\n      day4: [\"\", \"\", \"\", \"\", \"\"],\r\n      day5: [\"\", \"\", \"\", \"\", \"\"]\r\n    };\r\n\r\n    this.handleChange1 = this.handleChange1.bind(this);\r\n    this.handleChange2 = this.handleChange2.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleSubmitF = this.handleSubmitF.bind(this);\r\n    this.backbutton = this.backbutton.bind(this);\r\n  }\r\n\r\n  handleChange1 = event => {\r\n    this.setState({ location: event.target.value });\r\n  };\r\n\r\n  handleChange2 = event => {\r\n    this.setState({ country: event.target.value });\r\n  };\r\n\r\n  backbutton = event => {\r\n    this.setState({ submit: false });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    // loc is the end result of the user input, which should contain a valid location\r\n    const loc = this.state.location;\r\n    const con = this.state.country;\r\n\r\n    const bitkey = process.env.REACT_APP_API_KEY;\r\n\r\n    // fetch current weather conditions using openweather API\r\n\r\n    fetch(\r\n      \"https://api.weatherbit.io/v2.0/current/daily?city=\" +\r\n        loc +\r\n        \"&key=\" +\r\n        bitkey +\r\n        \"&units=\" +\r\n        this.state.units +\r\n        \"&country=\" +\r\n        con\r\n    )\r\n      // We get the API response and receive data in JSON format...\r\n      .then(response => response.json())\r\n      // ...then we update the users state\r\n      .then(data =>\r\n        this.setState({\r\n          desc: [\"/\" + data.data[0].weather.code + \".svg\", \"\"],\r\n          name: data.data[0].city_name + \", \" + data.data[0].country_code,\r\n          temp: data.data[0].temp\r\n        })\r\n      )\r\n      .catch(error => alert(\"Invalid Location Entered\"));\r\n\r\n    fetch(\r\n      \"https://api.weatherbit.io/v2.0/forecast/daily?city=\" +\r\n        loc +\r\n        \"&key=\" +\r\n        bitkey +\r\n        \"&units=\" +\r\n        this.state.units +\r\n        \"&country=\" +\r\n        con\r\n    )\r\n      .then(response => response.json())\r\n      // ...then we update the users state\r\n      .then(data =>\r\n        this.setState({\r\n          day1: [\r\n            data.data[0].max_temp,\r\n            data.data[0].weather.description,\r\n            \"/\" + data.data[0].weather.code + \".svg\",\r\n            data.data[0].min_temp,\r\n            data.data[0].datetime\r\n          ],\r\n          day2: [\r\n            data.data[1].max_temp,\r\n            data.data[1].weather.description,\r\n            \"/\" + data.data[1].weather.code + \".svg\",\r\n            data.data[1].min_temp,\r\n            data.data[1].datetime\r\n          ],\r\n          day3: [\r\n            data.data[2].max_temp,\r\n            data.data[2].weather.description,\r\n            \"/\" + data.data[2].weather.code + \".svg\",\r\n            data.data[2].min_temp,\r\n            data.data[2].datetime\r\n          ],\r\n          day4: [\r\n            data.data[3].max_temp,\r\n            data.data[3].weather.description,\r\n            \"/\" + data.data[3].weather.code + \".svg\",\r\n            data.data[3].min_temp,\r\n            data.data[3].datetime\r\n          ],\r\n          day5: [\r\n            data.data[4].max_temp,\r\n            data.data[4].weather.description,\r\n            \"/\" + data.data[4].weather.code + \".svg\",\r\n            data.data[4].min_temp,\r\n            data.data[4].datetime\r\n          ],\r\n          submit: true\r\n        })\r\n      )\r\n      .catch(error => console.log(\"Invalid Location Entered\"));\r\n\r\n    // Catch any errors we hit and update the app\r\n  };\r\n\r\n  // This is the same as handle submit with units as imperial instead of metric\r\n  handleSubmitF = event => {\r\n    event.preventDefault();\r\n    // loc is the end result of the user input, which should contain a valid location\r\n    const loc = this.state.location;\r\n    const con = this.state.country;\r\n\r\n    const bitkey = process.env.REACT_APP_API_KEY;\r\n\r\n    // fetch current weather conditions using openweather API\r\n\r\n    fetch(\r\n      \"https://api.weatherbit.io/v2.0/current/daily?city=\" +\r\n        loc +\r\n        \"&key=\" +\r\n        bitkey +\r\n        \"&units=imperial\" +\r\n        \"&country=\" +\r\n        con\r\n    )\r\n      // We get the API response and receive data in JSON format...\r\n      .then(response => response.json())\r\n      // ...then we update the users state\r\n      .then(data =>\r\n        this.setState({\r\n          desc: [\"/\" + data.data[0].weather.code + \".svg\", \"\"],\r\n          name: data.data[0].city_name + \", \" + data.data[0].country_code,\r\n          temp: data.data[0].temp\r\n        })\r\n      )\r\n      .catch(error => console.log(\"Invalid Location Entered\"));\r\n\r\n    fetch(\r\n      \"https://api.weatherbit.io/v2.0/forecast/daily?city=\" +\r\n        loc +\r\n        \"&key=\" +\r\n        bitkey +\r\n        \"&units=imperial\" +\r\n        \"&country=\" +\r\n        con\r\n    )\r\n      .then(response => response.json())\r\n      // ...then we update the users state\r\n      .then(data =>\r\n        this.setState({\r\n          day1: [\r\n            data.data[0].max_temp,\r\n            data.data[0].weather.description,\r\n            \"/\" + data.data[0].weather.code + \".svg\",\r\n            data.data[0].min_temp,\r\n            data.data[0].datetime\r\n          ],\r\n          day2: [\r\n            data.data[1].max_temp,\r\n            data.data[1].weather.description,\r\n            \"/\" + data.data[1].weather.code + \".svg\",\r\n            data.data[1].min_temp,\r\n            data.data[1].datetime\r\n          ],\r\n          day3: [\r\n            data.data[2].max_temp,\r\n            data.data[2].weather.description,\r\n            \"/\" + data.data[2].weather.code + \".svg\",\r\n            data.data[2].min_temp,\r\n            data.data[2].datetime\r\n          ],\r\n          day4: [\r\n            data.data[3].max_temp,\r\n            data.data[3].weather.description,\r\n            \"/\" + data.data[3].weather.code + \".svg\",\r\n            data.data[3].min_temp,\r\n            data.data[3].datetime\r\n          ],\r\n          day5: [\r\n            data.data[4].max_temp,\r\n            data.data[4].weather.description,\r\n            \"/\" + data.data[4].weather.code + \".svg\",\r\n            data.data[4].min_temp,\r\n            data.data[4].datetime\r\n          ],\r\n          submit: true\r\n        })\r\n      )\r\n      .catch(error => console.log(\"Invalid Location Entered\"));\r\n\r\n    // Catch any errors we hit and update the app\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submit) {\r\n      // If the form has already been submitted render the weather display\r\n      return (\r\n        <div>\r\n          <div>\r\n            <div class=\"menu-flex\">\r\n              <button class=\"menu-but\" onClick={this.backbutton}>\r\n                <img class=\"back-img menu-col\" src=\"/back.svg\" alt=\"\" />\r\n              </button>\r\n              <button class=\"menu-but\" onClick={this.handleSubmit}>\r\n                <h2 class=\"menu-col\">C°</h2>\r\n              </button>\r\n              <button class=\"menu-but\" onClick={this.handleSubmitF}>\r\n                <h2 class=\"menu-col\">F°</h2>\r\n              </button>\r\n            </div>\r\n            <div class=\"test-flex\">\r\n              <h2 class=\"test-col\">{this.state.name}</h2>\r\n            </div>\r\n            <div class=\"test-flex\">\r\n              <h3 class=\"test-col\">Current Conditions</h3>\r\n            </div>\r\n            <div class=\"test-flex\">\r\n              <img class=\"top-image\" src={this.state.desc[0]} alt=\"\" />\r\n            </div>\r\n            <div class=\"test-flex\">\r\n              <h3 class=\"test-col\">{this.state.temp}°</h3>\r\n            </div>\r\n            <div class=\"test-flex\">\r\n              <h3 class=\"test-col\">5-day Forecast</h3>\r\n            </div>\r\n\r\n            <div class=\"forecast-flex\">\r\n              <div class=\"forecast-col-1\">\r\n                <img class=\"forecast-img\" src={this.state.day1[2]} alt=\"\" />\r\n              </div>\r\n              <div class=\"forecast-col-2\">\r\n                <h4>{this.state.day1[4]}</h4>\r\n                <h4>High : {this.state.day1[0]}°</h4>\r\n                <h4>Low : {this.state.day1[3]}°</h4>\r\n              </div>\r\n              <div class=\"forecast-col-1\">\r\n                <img src={this.state.day2[2]} alt=\"\" />\r\n              </div>\r\n              <div class=\"forecast-col-2\">\r\n                <h4>{this.state.day2[4]}</h4>\r\n                <h4>High : {this.state.day2[0]}°</h4>\r\n                <h4>Low : {this.state.day2[3]}°</h4>\r\n              </div>\r\n              <div class=\"forecast-col-1\">\r\n                <img src={this.state.day3[2]} alt=\"\" />\r\n              </div>\r\n              <div class=\"forecast-col-2\">\r\n                <h4>{this.state.day3[4]}</h4>\r\n                <h4>High : {this.state.day3[0]}°</h4>\r\n                <h4>Low : {this.state.day3[3]}°</h4>\r\n              </div>\r\n              <div class=\"forecast-col-1\">\r\n                <img src={this.state.day4[2]} alt=\"\" />\r\n              </div>\r\n              <div class=\"forecast-col-2\">\r\n                <h4>{this.state.day4[4]}</h4>\r\n                <h4>High : {this.state.day4[0]}°</h4>\r\n                <h4>Low : {this.state.day4[3]}°</h4>\r\n              </div>\r\n              <div class=\"forecast-col-1\">\r\n                <img src={this.state.day5[2]} alt=\"\" />\r\n              </div>\r\n              <div class=\"forecast-col-2\">\r\n                <h4>{this.state.day5[4]}</h4>\r\n                <h4>High : {this.state.day5[0]}°</h4>\r\n                <h4>Low : {this.state.day5[3]}°</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } // if the form has not been completed, only render the form\r\n    else {\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div class=\"search-flex\">\r\n              <input\r\n                class=\"search-col\"\r\n                type=\"text\"\r\n                name=\"\"\r\n                value={this.state.location}\r\n                onChange={this.handleChange1}\r\n                placeholder=\"City\"\r\n              ></input>\r\n              <input\r\n                class=\"search-col-2\"\r\n                type=\"text\"\r\n                name=\"\"\r\n                value={this.state.country}\r\n                onChange={this.handleChange2}\r\n                placeholder=\"Country\"\r\n              ></input>\r\n            </div>\r\n            <div class=\"button-flex\">\r\n              <button class=\"sub-button\" type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default WeatherDisplay;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Nav from \"./nav\";\nimport WeatherDisplay from \"./WeatherDisplay\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrequire(\"dotenv\").config();\n\nReactDOM.render(<Nav />, document.getElementById(\"react-navbar\"));\nReactDOM.render(<WeatherDisplay />, document.getElementById(\"weather-display\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}